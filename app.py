import streamlit as st
import random
from datetime import datetime

# -------------------- CONFIGURACION INICIAL --------------------
st.set_page_config(page_title="Tipster IA Deportivo", layout="wide")
st.title("ü§ñ Tipster Deportivo Inteligente")
st.write("Selecciona un deporte y equipo/jugador para recibir predicciones diarias con an√°lisis.")

# -------------------- OPCIONES DE EJEMPLO --------------------
deportes = ["F√∫tbol", "Tenis", "Baloncesto"]
equipos = {
    "F√∫tbol": ["Barcelona FC", "Real Madrid", "Manchester City", "Liverpool"],
    "Tenis": ["Carlos Alcaraz", "Novak Djokovic"],
    "Baloncesto": ["Lakers", "Golden State Warriors"]
}

opciones_apuestas = {
    "F√∫tbol": [
        "+0.5 goles", "+1.5 goles", "Gana el partido", "Empate",
        "+6.5 corners", "+1.5 tarjetas", "M√°s de 3 tiros al arco"
    ],
    "Tenis": [
        "Gana el partido", "M√°s de 2 sets", "Gana 2-0", "M√°s de 10 aces"
    ],
    "Baloncesto": [
        "M√°s de 100 puntos", "Gana el partido", "M√°s de 10 triples", "Victoria por m√°s de 5"
    ]
}

# -------------------- SELECCI√ìN DEPORTIVA --------------------
deporte = st.selectbox("Selecciona el deporte", deportes)
equipo = st.selectbox("Selecciona el equipo/jugador", equipos[deporte])

# -------------------- FUNCIONES SIMULADAS --------------------
def obtener_cuota_simulada(prob):
    return round(1 / prob + random.uniform(0.05, 0.3), 2)

def analizar_noticias_simulado(equipo):
    ejemplos = [
        f"El equipo/jugador {equipo} ha mostrado un gran rendimiento en los √∫ltimos partidos.",
        f"Bajas confirmadas por lesi√≥n afectan el desempe√±o de {equipo}.",
        f"Condiciones favorables para un resultado positivo de {equipo}.",
        f"{equipo} viene de una racha positiva en esta categor√≠a de apuestas."
    ]
    return random.choice(ejemplos)

# -------------------- GENERAR PREDICCIONES --------------------
if st.button("Generar predicciones"):
    st.subheader(f"üéØ Predicciones para {equipo} ({deporte}) - {datetime.now().strftime('%d/%m/%Y')}")

    predicciones = random.sample(opciones_apuestas[deporte], k=3)

    for opcion in predicciones:
        prob = round(random.uniform(0.55, 0.85), 2)
        cuota = obtener_cuota_simulada(prob)
        valor_esperado = round(prob * cuota, 2)
        justificacion = analizar_noticias_simulado(equipo)

        with st.container():
            st.markdown(f"### üìå Apuesta: **{opcion}**")
            st.write(f"- üî¢ Probabilidad estimada: **{prob * 100:.1f}%**")
            st.write(f"- üí∏ Cuota promedio: **{cuota:.2f}**")
            st.write(f"- üìà Valor esperado: **{valor_esperado:.2f}**")
            st.info(f"üß† Justificaci√≥n autom√°tica: {justificacion}")

            if valor_esperado > 1:
                st.success("‚úÖ Apuesta con valor estad√≠stico positivo")
            else:
                st.warning("‚ö†Ô∏è Valor esperado bajo (no recomendada)")
